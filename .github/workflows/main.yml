name: Merge main into main-v3

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  merge-pr-to-main-v3:
    name: Merge the PR into main-v3
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout the PR branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to access previous commits

      - name: Set up Git User Information
        run: |
          # Check if the event is a pull request and set user info accordingly
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            USER_NAME="${{ github.event.pull_request.user.login }}"
            USER_EMAIL="${{ github.event.pull_request.user.email }}"
          else
            USER_NAME="${{ github.actor }}"
            USER_EMAIL="${{ github.actor }}@users.noreply.github.com"  # Default email format for direct commits
          fi
          echo "USER_NAME=$USER_NAME" >> $GITHUB_ENV
          echo "USER_EMAIL=$USER_EMAIL" >> $GITHUB_ENV
          
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"


      - name: Identify the PR number
        id: pr-info
        run: |
          # Use the PR number directly from the event if available
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            # Extract PR number from the merge commit title if it's a push event
            PR_NUMBER=$(git log -1 --pretty=%B | grep -oE '#[0-9]+' || echo "")
            PR_NUMBER=${PR_NUMBER#"#"}  # Remove '#' character
          fi
          echo "PR_NUMBER: $PR_NUMBER"
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: List, Count, and Check Open PRs to main-v3
        id: list-count-check-prs
        run: |
          # Fetch open PRs targeting main-v3 branch as JSON
          RAW_OPEN_PRS=$(gh pr list --base main-v3 --state open --json number --jq '.[].number' || echo "[]")
          
          # Check if RAW_OPEN_PRS is empty or "[]", assign default values if so
          if [[ -z "$RAW_OPEN_PRS" || "$RAW_OPEN_PRS" == "[]" ]]; then
            echo "No open PRs found for main-v3. Setting default values."
            OPEN_PRS_FOR_MAIN_V3=""
            MULTIPLE_OPEN_PRS="false"
          else
            # Sort PR numbers, remove newlines, and create a comma-separated string
            OPEN_PRS_FOR_MAIN_V3=$(echo "$RAW_OPEN_PRS" | tr '\n' ',' | sed 's/,$//' | sort -n)
          
            # Count number of PRs based on comma-separated values and set MULTIPLE_OPEN_PRS
            OPEN_PR_COUNT=$(echo "$OPEN_PRS_FOR_MAIN_V3" | tr -cd ',' | wc -c)
            OPEN_PR_COUNT=$((OPEN_PR_COUNT + 1)) # Adding 1 because counts are one more than commas
            MULTIPLE_OPEN_PRS=$([ "$OPEN_PR_COUNT" -gt 1 ] && echo "true" || echo "false")
          fi
          
          # Export final values to GitHub environment
          echo "OPEN_PRS_FOR_MAIN_V3=$OPEN_PRS_FOR_MAIN_V3" >> $GITHUB_ENV
          echo "MULTIPLE_OPEN_PRS=$MULTIPLE_OPEN_PRS" >> $GITHUB_ENV

      - name: Create a new branch for merge
        id: create-branch
        run: |
          # Max branch name length allowed by Git is 255 characters.
          MAX_LENGTH=255

          # Fetch the author's name, sanitize, and trim it to a readable length
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an' | sed 's/ /-/g' | cut -c1-20) # Trim to 20 chars for readability

          # Get short commit hash (7 characters for brevity)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

          # Check if there's a PR number to generate branch name
          if [ -n "${{ env.PR_NUMBER }}" ]; then
            MERGE_BRANCH_NAME="merge/main-v3/${AUTHOR_NAME}/pr-${{ env.PR_NUMBER }}"
          else
            TIMESTAMP=$(date +'%Y%m%d-%H%M')
            MERGE_BRANCH_NAME="merge/main-v3/${AUTHOR_NAME}/${COMMIT_HASH}-${TIMESTAMP}"
          fi

          # Ensure branch name does not exceed 255 characters
          MERGE_BRANCH_NAME=$(echo "$MERGE_BRANCH_NAME" | cut -c1-$MAX_LENGTH)

          # Delete existing branch if it already exists
          if git ls-remote --exit-code --heads origin "$MERGE_BRANCH_NAME"; then
            echo "Branch $MERGE_BRANCH_NAME already exists. Deleting the branch to start fresh."
            git push origin --delete "$MERGE_BRANCH_NAME"
          fi
          
          # Create and push the new branch
          git checkout -b "$MERGE_BRANCH_NAME"
          git push origin "$MERGE_BRANCH_NAME"
          echo "MERGE_BRANCH_NAME=$MERGE_BRANCH_NAME" >> $GITHUB_ENV


      - name: Handle PR creation or clean merge
        run: |
          # Fetch the latest changes from both main and main-v3 branches
          git fetch origin main-v3
          
          # Checkout the main-v3 branch
          git checkout main-v3
          
          # Attempt to merge main into main-v3
          if git merge "${{ env.MERGE_BRANCH_NAME }}" --no-commit --no-ff; then
            # Check the status of the merge to see if there are changes to commit
            if [[ "$(git diff --stat --cached)" != "" && "${{ env.MULTIPLE_OPEN_PRS }}" == "false" ]]; then
              echo "‚è© Changes detected, proceeding with direct merge."
              git commit -m "Merging changes [${{ env.COMMIT_HASH }}] from ${{ env.MERGE_BRANCH_NAME }} to main-v3"
              git push origin main-v3
              echo "‚úÖ Successfully merged to main-v3"
            else
              echo "‚ÑπÔ∏è No changes to merge; nothing to commit."
            fi
            # Delete the temporary branch after successful merge or no changes
            git push origin --delete "${{ env.MERGE_BRANCH_NAME }}"
            echo "üßπ Temporary branch ${{ env.MERGE_BRANCH_NAME }} deleted successfully."
          else
            # If there are merge conflicts, notify and create a PR for manual resolution
            echo "üö´ Merge conflicts detected, creating PR for manual resolution."
            MERGE_BRANCH_URL="https://github.com/${{ github.repository }}/tree/${{ env.MERGE_BRANCH_NAME }}"
          
            # Format the PR description as a bullet list if multiple open PRs exist
            PR_DESCRIPTION=$(
              if [ "${{ env.MULTIPLE_OPEN_PRS }}" == "true" ]; then
                # Format PR numbers with bullets and newlines
                echo -e "Depends on the PRs:\n$(echo "${{ env.OPEN_PRS_FOR_MAIN_V3 }}" | sed 's/,/\n/g' | sed 's/^/- #/')"
              else
                echo ""
              fi
            )
          
            # Set the draft flag based on MULTIPLE_OPEN_PRS
            DRAFT_FLAG=$([[ "${{ env.MULTIPLE_OPEN_PRS }}" == "true" ]] && echo "--draft" || echo "")
            LABELS=$([ "${{ env.MULTIPLE_OPEN_PRS }}" == "true" ] && echo "--label bug" || echo "")
            echo "DRAFT_FLAG: $DRAFT_FLAG"
            echo "LABELS: $LABELS"
                    
            # Ensure the variables are properly sanitized for use in the command
            echo "MERGE_BRANCH_URL: $MERGE_BRANCH_URL"
            echo "PR_DESCRIPTION: $PR_DESCRIPTION"
            MERGE_BRANCH_URL_SAFE=$(echo "$MERGE_BRANCH_URL" | sed 's/"/\\"/g')   # Escape double quotes
            PR_DESCRIPTION_SAFE=$(echo "$PR_DESCRIPTION" | sed 's/"/\\"/g')       # Escape double quotes
          
            # Construct the PR body with formatted text and bullet list for dependencies
            PR_BODY=$(printf "Merge conflicts occurred while attempting to merge changes %s from [%s](%s) to main-v3.\n\nPlease resolve the conflicts.\n\n%s" \
                            "${{ env.COMMIT_HASH }}" \
                            "${{ env.MERGE_BRANCH_NAME }}" \
                            "$MERGE_BRANCH_URL_SAFE" \
                            "$PR_DESCRIPTION_SAFE")

            # Debug print to ensure PR_BODY is formatted correctly
            echo "PR_BODY: $PR_BODY"
            echo "MERGE_BRANCH_URL_SAFE: $MERGE_BRANCH_URL_SAFE"
            echo "PR_DESCRIPTION_SAFE: $PR_DESCRIPTION_SAFE"

            # Create a pull request for the merge conflicts
            gh pr create $DRAFT_FLAG $LABELS \
              --base main-v3 \
              --head "${{ env.MERGE_BRANCH_NAME }}" \
              --title "Resolve conflicts while merging ${{ env.MERGE_BRANCH_NAME }} into main_v3" \
              --body "$PR_BODY"

            echo "‚úÖ Pull request created for manual resolution."
          fi

      - name: Merge resolution instruction
        if: failure()
        run: |
          echo "‚õô Merge conflicts must be resolved manually. PR created for branch ${{ env.MERGE_BRANCH_NAME }}."
